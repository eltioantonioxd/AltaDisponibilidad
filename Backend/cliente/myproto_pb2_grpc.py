# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import myproto_pb2 as myproto__pb2


class ServicerStub(object):
    """Servicio
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTemperature = channel.unary_unary(
                '/mypackage.Servicer/GetTemperature',
                request_serializer=myproto__pb2.Empty.SerializeToString,
                response_deserializer=myproto__pb2.TemperatureResponse.FromString,
                )
        self.GetUF = channel.unary_unary(
                '/mypackage.Servicer/GetUF',
                request_serializer=myproto__pb2.Empty.SerializeToString,
                response_deserializer=myproto__pb2.UFResponse.FromString,
                )
        self.GetDollar = channel.unary_unary(
                '/mypackage.Servicer/GetDollar',
                request_serializer=myproto__pb2.Empty.SerializeToString,
                response_deserializer=myproto__pb2.DollarResponse.FromString,
                )


class ServicerServicer(object):
    """Servicio
    """

    def GetTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUF(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDollar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemperature,
                    request_deserializer=myproto__pb2.Empty.FromString,
                    response_serializer=myproto__pb2.TemperatureResponse.SerializeToString,
            ),
            'GetUF': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUF,
                    request_deserializer=myproto__pb2.Empty.FromString,
                    response_serializer=myproto__pb2.UFResponse.SerializeToString,
            ),
            'GetDollar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDollar,
                    request_deserializer=myproto__pb2.Empty.FromString,
                    response_serializer=myproto__pb2.DollarResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mypackage.Servicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Servicer(object):
    """Servicio
    """

    @staticmethod
    def GetTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mypackage.Servicer/GetTemperature',
            myproto__pb2.Empty.SerializeToString,
            myproto__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUF(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mypackage.Servicer/GetUF',
            myproto__pb2.Empty.SerializeToString,
            myproto__pb2.UFResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDollar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mypackage.Servicer/GetDollar',
            myproto__pb2.Empty.SerializeToString,
            myproto__pb2.DollarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
